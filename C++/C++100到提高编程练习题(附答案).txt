1.m个人的成绩存放在score数组中，请编写函数fun,它的功能是：将低于平均分的人作为函数值返回，将低于平均分的分数放在below所指定的函数中。
2.请编写函数fun，它的功能是：求出1到100之内能北7或者11整除，但不能同时北7和11整除的所有证书，并将他们放在a所指的数组中，通过n返回这些数的个数。
3.请编写函数void fun(int x,int pp[],int *n),它的功能是：求出能整除x且不是偶数的各整数，并按从小到大的顺序放在pp所指的数组中，这些除数的个数通过形参n返回。
4.请编写一个函数void fun(char *tt,int pp[]),统计在tt字符中"a"到"z"26各字母各自出现的次数，并依次放在pp所指的数组中。
5.请编写一个函数void fun(int m,int k,int xx[]),该函数的功能是：将大于整数m且紧靠m的k各素数存入xx所指的数组中。
6.请编写一个函数void fun(char a[],char[],int n),其功能是：删除以各字符串中指定下标的字符。其中，a指向原字符串，删除后的字符串存放在b所指的数组中，n中存放指定的下标。
7.请编写一个函数int fun(int *s,int t,int *k),用来求除数组的最大元素在数组中的下标并存放在k所指的储存单元中。
8.编写函数fun,功能是：根据以下攻势计算s,计算结果作为函数值返回；n通过形参传入。s=1+1/(1+2)+1/(1+2+3)+.......+1/(1+2+3+4+......+n)
9.编写一个函数fun，它的功能是：根据以下公式求P的值，结果由函数值带回。m与n为两个正整数，且要求m>n。   p=m!/n!(m-n)!
10.编写函数fun,它的功能是：利用以下的简单迭代方法求方程cos(x)-x=0的一个实根。
   迭代步骤如下：(1)取x1初值为0.0； (2)x0=x1,把x1的值赋各x0;
   (3)x1=cos(x0),求出一个新的x1;
(4)若x0-x1的绝对值小于0.000001，则执行步骤(5),否则执行步骤(2);
   (5)所求x1就是方程cos(x)-x=0的一个实根，作为函数值返回。
   程序将输出Root=0.739085。
11.下列程序定义了N×N的二维数组，并在主函数中自动赋值。请编写函数 fun(int a[][N]),该函数的功能是：使数组左下半三角元素中的值全部置成0。
12.下列程序定义了N×N的二维数组，并在主函数中赋值。请编写函数fun,函数的功能使求出数组周边元素的平均值并作为函数值返回给主函数中的s。
13.请编写一个函数void fun(int tt[M][N],int pp[N]),tt指向一个M行N列的二维函数组，求出二维函数组每列中最小元素，并依次放入pp所指定一维数组中。二维数组中的数已在主函数中赋予。
14.请别写函数fun,函数的功能使求出二维数组周边元素之和，作为函数值返回。二维数组中的值在主函数中赋予。
15.请编写一个函数unsigned fun(unsigned w),w使一个大于10的无符号整数，若w使n(n≥2)位的整数，则函数求出w后n－1位的数作为函数值返回。
16.请编写一个函数float fun(double h),函数的功能使对变量h中的值保留2位小树，并对第三位进行四舍五入(规定h中的值位正数)。
17.请编写一个函数fun(char *s)，该函数的功能使把字符串中的内容拟置。
18.编写程序，实现矩阵(3行3列)的转置(即行列互换)。
19.编写函数fun,该函数的功能是：从字符中删除指定的字符，同一字母的大、小写按不同字符处理。
20.编写函数int fun(int lim,int aa[MAX]),该函数的功能是求出小于或等于lim的所有素数并放在aa数组中，该函数返回所求的素数的个数。
21.请编写函数fun,对长度位7个字符的字符串，除首尾字符外，将其余5个字符按ASCII码降序排列。
22.N名学生的成绩已在主函数中放入一个带头节点的链表结构中，h指向链表的头节点。请编写函数fun，它的功能是：找出学生的最高分，由函数值返回。
23.请编写函数fun，该函数的功能是：判断字符串是否为回文?若是则函数返回1，主函数中输出YES，否则返回0，主函数中输出NO。回文是指顺读和倒读都是一样的字符串。
24.请编写一个函数fun，它的功能是：将一个字符串转换为一个整数(不得调用C语言提供的将字符串转换为整数的函数)。
25.请编写一个函数fun，它的功能是：比较两个字符串的长度，(不得调用C语言提供的求字符串长度的函数)，函数返回较长的字符串。若两个字符串长度相同，则返回第一个字符串。
 26.请编写一个函数fun，它的功能是：根据以下公式求X的值(要求满足精度0.0005，即某项小于0.0005时停止迭代)：
X/2=1+1/3+1×2/3×5+1×2×3/3×5×7+1×2×3×4/3×5×7×9+...+1×2×3×...×n/3×5×7×(2n+1)
程序运行后，如果输入精度0.0005，则程序输出为3.14...。
27.请编写一个函数fun,它的功能是：求除1到m之内(含m)能北7或11整除的所有整数放在数组a中，通过n返回这些数的个数。
28.请编写一个函数fun，它的功能是：找出一维整型数组元素中最大的值和它所在的下标，最大的值和它所在的下标通过形参传回。数组元素中的值已在主函数中赋予。主函数中x是数组名，n 是x中的数据个数，max存放最大值，index存放最大值所在元素的下标。
29.请编写一个函数fun，它的功能是：将ss所指字符串中所有下标为奇数位置上的字母转换为大写(若该位置上不是字母，则不转换)。
30.请编写一个函数fun，它的功能是：求除一个2×M整型二维数组中最大元素的值，并将此值返回调用函数。
31.请编写函数fun，其功能是：将s所指字符串中除了下标为偶数、同时ASCII值也为偶数的字符外，其余的全都删除；串中剩余字符所形成的一个新串放在t所指的一个数组中。
32.请编写函数fun，其功能是：将s所指字符串中除了下标为奇数、同时ASCII值也为奇数的字符之外，其余的所有字符都删除，串中剩余字符所形成的一个新串放在t所指的一个数组中。
33.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：使字符串中尾部的*号不得多于n个；若多于n个，则删除多于的*号；若少于或等于n个，则什么也不做，字符串中间和前面的*号不删除。
34.学生的记录由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能使：把分数最高的学生数据放在h所指的数组中，注意：分数最高的学生可能不止一个，函数返回分数最高的学生的人数。
35.请编写一个函数，用来删除字符串中的所有空格。
36.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：将字符串中的前导*号全部移到字符串的尾部。
37.某学生的记录由学号、8门课程成绩和平均分组成，学号和8门课程的成绩已在主函数中给出。请编写函数fun，它的功能是：求出该学生的平均分放在记录的ave成员中。请自己定义正确的形参。
38.请编写函数fun，它的功能是：求出ss所指字符串中指定字符的个数，并返回此值。
39.请编写函数fun，该函数的功能是：移动一维数组中的内容，若数组中由n个整数，要求把下标从0到p(p小于等于n－1)的数组元素平移到数组的最后。
40.请编写函数fun，该函数的功能是移动字符串中内容，移动的规则如下：把第1到第m个字符，平移到字符串的最后，把第m＋1到最后的字符移到字符串的前部。
  41.请编写函数fun，该函数的功能是：将M行N列的二维数组中的字符数据，按列的顺序依次放到一个字符串中。
42.下列程序定义了N×N的二维数组，并在主函数中自动赋值。请编写函数fun(int a[][N],int n),该函数的功能是：将数组右上半三角元素中的值乘以m。
43.编写一个函数，从传入的num个字符串中找出一个最长的一个字符串，并通过形参指针max传回该串地址(用****作为结束输入的标志)。
44.编写一个函数，该函数可以统计一个长度为2的字符串在另一个字符串中出现的次数。
45.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：只删除字符串前导和尾部的*号，串中字母之间的*号都不删除。形参n 给出了字符串的长度，形参h给出了字符串中前导*号的个数，形参e给出了字符串中最后的*个数。在编写时不得使用C语言给提供得字符串函数。
46.学生得记录由学号和成绩组称个，N名大学生得数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能时：按分数的高低排列学生的记录，高分在前。
47.请编写一个函数void fun(char *ss)，其功能时：将字符串ss中所有下标为奇数位置上的字母转换为大写(若位置上不是字母，则不转换)。
48.请编写函数fun，其功能是：将两个两位数的正整数a,b合并成一个整数放在c中。合并的方式是：将a数的十位和个位依次放在c数的千位和十位上，b数的十位和个位数依次放在c数的百位和个位上。
49.请编写函数fun，其功能是：将s所指字符串中下标位偶数同时ASCII值为奇数的字符删除，s中剩余的字符形成的新串放在t所指的数组中。
50.已知学生的记录是由学号和学习成绩构成，N名学生的数据已存入a机构体数组中。请编写函数fun，该函数的功能是：找出成绩最高的学生记录，通过形参返回主函数(规定只有一个最高分)。
51.请编写函数fun，其功能是：将所有大于1小于整数m的非素数存入xx所指的数组中，非素数的个数通过k传回。
52.编写一个函数fun，它的功能是：实现两个字符串的连接(不使用库函数strcat)，即把p2所指的字符串连接到p1所指的字符串后。
53.请编写函数fun,该函数的功能是：实现B=A+A'，即把矩阵A加上A的转置，存放在矩阵B中。计算结果在main函数中输出。
54.学生的记录由学号和成绩组称个，N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能是：把低于平均分的学生数据放在b所指的数组中，低于平均分的学生人数通过形参n传回，平均分通过函数值返回。
55.请编写函数fun，该函数的功能是：将M行N列的二维数组中的数据，按行的顺序依次放到一维数组中，一维数组中数据的个数存放在形参n所指的储存单元中。
56.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：除了尾部的*号之外，将字母串中其他*号全部删除。形参p已指向字符串中最后的一个字母。不使用c的字符串函数。       
57.学生的记录是由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能是：把指定分数范围内的学生数据放在b所指的数组中，分数范围内的学生人数由函数值返回。     
58.编写函数藏服那，它的功能是：求n以内(不包括n)同时能被3与7整除的所有自然数之和的平方根s，并作为函数值返回。
59.请别写函数fun，该函数的功能是：将放在字符串数组中的M个字符串(每串的长度不超过N)，按顺序合并组成一个新的字符串。
60.请编写函数fun，该函数的功能是：删去一维数组中所有相同的数，使之只剩一个。数组中的数已按由小到大的顺序排列，函数返回删除后数组中数据的个数。
61.请编写函数fun，该函数的功能使：统计各年龄段的人数。N个年龄通过调用随机函数获得，并放在主函数的age数组中；要求函数把0至9岁年龄段的人数放在d[0]中，把10至19岁年龄段的人数放在d[1]中，把20至29岁的人数放在d[2]中，其余以此类推，把100岁(含100以上年龄的人数都放在d[10]中。结果在主函数中输出。
62.请编写函数fun，该函数的功能是：统一一含字符串中单词的个数，作为函数值返回。一行字符串在主函数中输入，规定所有单词由小写字母组成，单词之间由若干个空格格开，一行的开始没有空格。
 63.请编写一个函数fun，它的功能是：计算并输出给定整数n的所有因子(不包括1与自身)之和。规定n的值不大于1000。
64.请编写函数fun，其功能是：将s所指字符串中ASCII值为奇数的字符删除，串中剩余字符形成一个新串放在t所指的数组中。
65.请编写函数fun，其功能是：将两位数的正整数a、b合并成一个整数放在c中。合并的方式是：将a数的十位和个位数依次放在c数的百位和个位上，b数的十位和个位数依次放在c数的十位和千位上。
66.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：删除字符串中所有*号。在编写函数时，不得使用C语言提供的字符串函数。
67.学生的记录时由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能时：函数返回指定学号的学生数据，指定的学号在主函数中输入。若没找到指定学号，在结构体变量中给学号置空串，给成绩置-1,作为函数值返回(用于字符串比较的函数时strcmp)。
68.请编写函数fun，其功能时：计算并输出下列多项式的值：
sn=1+1/1!+1/2!+1/3!+1/4!+...+1/n!
69.请编写一个函数fun，它的功能时：求Fibonacci数列中大于t的最小的一个数，结果由函数返回。其中Fibonacci数列F(n)的定义为：
F(0)=0,F(1)=1,F(n)=F(n-1)+F(n-2)
70.编写函数fun，它的功能时：计算并输出下列级数和：
S=1/1*2+1/2*3+...+1/n(n+1)
71.请编写函数fun，其功能时：将两个两位数的正整数a、b合并形成一个整数放在c中，合并的方式是：将a数的十位和个位数依次放在c数的十位和千位上，b的十位和个位整数依次放在c数的百位和个位上。
72.请编写函数fun，其功能是：将s所指字符串中下标为偶数的字符删除，串中剩余字符形成新串放在t所指数组中。
73.假定输入的字符串中只包含字母和*号，请编写函数fun，它的功能是：除了字符串前导和尾部的*号之外，将串中其他*号全部删除。形参h已指向字符串第一个字符，形参p已指向字符串中最后一个字母。在编写程序时，不得使用C语言提供的字符串函数。
74.学生的记录由学号和成绩组成N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能时：把分数最低的学生数据放在h所指的数组中，注意：分数最低的学生可能不止一个，函数返回分数最低的学生的人数。
75.请编写函数fun ，该函数的功能：将M行N列的二维数组中的数据，按列的顺学依次放到一维数组中。
76.请编写函数fun，其功能时：计算并输出当x<0.97时下列多项式的值，直到｜Sn-S(n-1)｜<0.000001为止。
Sn=1+0.5x+0.5(0.5-1)/2!x(2)+...+0.5(0.5-1)(0.5-2).....(0.5-n+1)/n!x(n)
77.请编写一个函数fun，其功能是：将两个两位数的正整数ab合并形成一个整数放在c中。合并方式是：将a数的十位和个位数依次放在c数的个位和百位上，b数的十位和个位数依次放在c数的十位和千位上。
78.请编写函数fun，其功能是：将s所指字符串中ASCII值为偶数的字符删除，串中剩余字符形成一个新串放在t所指的数组中。
79.已知学生的记录由学号和学习成绩构成，N名学生的数据已存入a结构体数组中。请编写函数fun，该函数的功能是：找出成绩最低的学生记录，通过形参返回主函数(规定只有一个最低分)。
 80.程序定义了N×N的二维数组，并在主函数中自动赋值。请编写函数fun,该函数的功能是：使数组左下半三角元素中的值乘以n。
81.请编写函数fun，其功能使：将两个两位正整数a b合并形成一个整数放在c中。合并的方式使：将a数的十位和个位数依次放在c数的百位和个位上，b数的十位和个位数依次放在c数的千位和十位上。
82.请编写一个函数fun，它的功能使：计算n门课程的平均分，计算结果作为函数值返回。
83.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能使：将字符串尾部的*号全部删除，前面和中间的*号不删除。
84.请编写函数fun，其功能是：将两个两位数的正整数a b合并形成一个整数放在c中，合并的方式是：将a数的十位和个位数依次放在c的个位和百位上，b数的十位和个位数依次放在c数的千位和十位上。
85.N名学生的成绩已在主函数中放入一个带头节点的链表结构中，h指向链表的头节点。请编写函数fun，它的功能是：求出平均分，由函数值返回；
86.请编写函数fun，计算并输出给定10个数的方差：
87.请编写函数fun，其功能是：将两个两位数的正整数a b合并形成一个整数放在c 中。合并的方式是：将a数的十位和个位数依次放在c数的千位和十位上，b数的十位和个位数依次放在c数的个位和百位上。
88.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：除了字符串前导的*号之外，将串中其他*号全部删除。在编写函数亚时，不得使用C语言提供的字符串函数。
89.学生的记录是由学号和成绩组成，N名学生的数据已在主函数中放入结构体数组s中，请编写函数fun，它的功能是：把高于等于平均分的学生数据放在b所指的数组中，高于等于平均分的学生人数通过形参n传回，平均分通过函数值返回。
90.请编写函数fun，其功能是：计算并输出下列多项式值:Sn=(1-1/2)+(1/3-1/4)+...+(1/(2n-1)1/2n).
91.请编写函数fun，其功能是：将两个两位数的正整数a b合并形成一个整数放在c中。合并的方式是：将a数的十位和个位数依次放在c的十位和千位上，b数的十位和个位数依次放在c数的个位和百位上。
92.请编写函数fun，它的功能是计算：s=(ln(1)+ln(2)+ln(3)+...+ln(m))(0.5),s作为函数值返回。
93.请编写函数fun，它的功能是计算下列级数和，和值由函数值返回。
s=1+x+x(2)/2!+x(3)/3!+...x(n)/n!
94.规定输入字符串中只包含字母和*号。请编写函数fun，它的功能是：将函数字符串中的前导*号全部删除，中间和尾部的*号不删除。
95.假定输入的字符串中只包含字母和*号。请编写函数fun，它的功能是：使字符串的前导*号不得多于n个；若多于n个，则删除多于的*号；若少于或等于n个，则什么也不做。字符串中间和尾部的*号不删除。
96.请编写函数fun，其功能使：计算并输出给定数组(长度为9)中每相邻两个元素之平均值的平方根之和
97.请编写函数fun，其功能是：计算并输出下列多项式值：
s=1+1/(1+2)+1/(1+2+3)+..1/(1+2+3...+50)
98.请编写函数fun，它的功能是：计算并输出n(包括n)以内能被5或9整除的所有自然数的倒数之和。
99.请编写函数fun ，其功能是：计算并输出3到n之间所有素数的平方根之和。
100.请编写函数fun，其功能是：计算并输出 s=1+(1+2(0.5))+(1+2(0.5)+3(0.5))+...+(1+2(0.5)+3(0.5)+...+n(0.5))
【编程解答】
1.int fun(int score[],int m,int below[])
{int i,k=0,aver=0;
  for(i-0;i<m;i++)
     aver+=score[i];
  aver/=m;
  for(i=0,i<m;i++)
     if(score[i]<aver)
     {below[k]=score[i];
       k++;}
 return k;}  
2.void fun(int *a,int *n)
{int i,j=0;
     for(i=2;i<1000;i++)
        if((i%7==0／／i%11＝＝0))&i%77!=0)
            a[j++]=i;
     *n=j;}
3. void fun(int x, int pp[],int *n)
{int i=1,j=0,k=0,*t=pp;
     for(i=0;i<=x;i++)
        if(i%2!=0)
        {t[j]=i;
           j++;}
     for(i=0;i<j;i++)
        if(x%t[i]==0)
        {pp[k]=t[i];
           k++;}
     *n=k;}
4. void fun(char *tt,int pp[])
{int i;
    for(i=0;i<26;i++)
       pp[i]=0;
    while (*tt)
    {switch(*tt)
    {case'a':pp[0]++;break;
    case'b':pp[1]++;break;
    case'c':pp[2]++;break;
    case'd':pp[3]++;break;
    case'e':pp[4]++;break;
    case'f':pp[5]++;break;
    case'g':pp[6]++;break;
    case'h':pp[7]++;break;
    case'i':pp[8]++;break;
    case'j':pp[9]++;break;
    case'k':pp[10]++;break;
    case'l':pp[11]++;break;
    case'm':pp[12]++;break;
    case'n':pp[13]++;break;
    case'o':pp[14]++;break;
    case'p':pp[15]++;break;
    case'q':pp[16]++;break;
    case'r':pp[17]++;break;
    case's':pp[18]++;break;
    case't':pp[19]++;break;
    case'u':pp[20]++;break;
    case'v':pp[21]++;break;
    case'w':pp[22]++;break;
    case'x':pp[23]++;break;
    case'y':pp[24]++;break;
    case'z':pp[25]++;break;}
    tt++;}
}
5. void fun(int m,int k,int xx[])
{int g=0,i,j,flag=1;
     for(i=m+1;i<m*m;i++)
     {for(j=2;j<i;j++)
        {if (i%j!=0)
              flag=1;
           else
           {flag=0;
               break;}
 }
        if (flag==1&j>=i)
        {if (k>0)
           {xx[g++]=i;
               k--;}
           else
               break;}}}
6. void fun(char a[],char b[],int n)
{int i,j=0;
     for (i=0;i<LEN;i++)
         if(i!=n)
         {b[j]=a[i];
             j++;}
         b[j]='\0';}
7. void fun(int *s,int t,int*k)
{int i,max;
     max=s[0];
     for (i=0;i<t;i++)
         if (s[i]>max)
         {max=s[i];
            *k=i; }}
8. float fun(int n)
{int i;
      float s=1.0,t=1.0;
      for (i=2;i<=n;i++)
      {t=t+i;
          s=s+1/t;}
      return s;}
9. p=m!/n!(m-n)!
float fun(int m,int n)
{float p,t=1.0;
     int i;
     for (i=1;i<=m;i++)
         t=t*i;
     p=t;
     for (t=1.0,i=1;i<=n;i++)
         t=t*i;
     p=p/t;
     for(t=1.0,i=1;i<m-n;i++)
         t=t*i;
     p=p/t;
     return p;}
10. folat fun()
{float x1=0.0,x0;
     do
     {x0=x1;
          x1=cos(x0); }
     while (fabs(x0-x1)>=1e-6);
     return x1;}
11. int fun(int a[][N])
{int i,j;
    for(i=0;i<N;i++)
        for(j=0;j<i;j++)
           a[i][j]=0;}
12.double fun (int w[][N])
{int i,j,k=0;
     double s=0.0;
     for (j=0;j<N;j++)
     {s+=w[0][j];
         k++;}
     for (j=0;j<N;j++)
     {s+=w[N-1][j];
         k++;}
     for (i=1;i<=N-2;i++)
     {s+=w[i][0];
         k++;}
     return s/=k;}
13. void fun(int tt[M][N],int pp[N])
{int i,j,min;
     for (j=0;j<N;j++)
     {min=tt[0][j];
         for (i=0;i<M;i++)
         {if (tt[i][j]<min)
                 min=tt[i][j];}
         pp[j]=min;}}
14. int fun (int a[M][N])
{int i,j,s=0;
    for (j=0;j<N;j++)
    {s+=a[0][j];
        s+=a[M-1][j];}
    for (i=1;i<=M-2;i++)
    {s+=a[i][0];
        s+=a[i][N-1];}
    return s;}
15. unsigned fun(unsigned w)
{unsigned t,s=0,s1=1,p=0;
     t=w;
     while(t>10)
     {if(t/10)
            p=t%10;
         s=s+p*s1;
         s1=s1*10;
         t=t/10; }
     return s;}
16. float fun (float h)
{long t;
    float s;
    h=h*1000;
    t=(h+5)/10;
    s=(float)t/100.0;
    return s;}
17. void fun(char *s)
{char ch;
   int i,m,n;
   i=0;
   m=n=strlen(s)-1;
   while(i<(n+1)/2)
   {ch=s[i];
       s[i]=s[m];
       s[m]=ch;
       i++;
       m--;}}
18. void fun(int array[3][3])
{int i,j,temp;
    for (i=0;i<3;i++)
    {temp=array[i][j];
       array[i][j]=array[j][i];
       array[j][i]=temp; }}
19. void fun(char s[],int c)
{int i=0;
    char*p;
    p=s;
    while(*p)
    {if(*p!=c)
       {s[i]=*p;
           i++;}
       p++;}
    s[i]='\0';}
20. int fun(int lim,int aa[MAX])
{int k=0,i,j;
    for(i=lim;i>1;i--)
    {for(j=2;j<i;j++)
           if(i%j==0)
              break;
           else
              continue;
           if(j>=i)
           {aa[k]=i;
              k++;}}
    return k++;}
21.void fun(char *s,int num)
{char t;
    int i,j;
    for (i=1;i<num-2;i++)
        for (j=i+1;j<num-1;j++)
            if(s[i]<s[j])
            {t=s[i];
            s[i]=s[j];
            s[j]=t;}}
22. double fun (STREC *h)
{ double max;
     STREC *q=h;
     max=h->s;
     do
     {if(q->s>max)
             max=q->s;
         q=q->next; }
     while(q!=0);
     return max;}
23. int fun(char *str)
{int i,n=0,fg=1;
   char *p=str;
   while (*p)
   {n++;
      p++;}
   for (i=0;i<n/2;i++)
      if (str[i]==str[n-1-i]);
      else
      {fg=0;
         break;}
    return fg;}
24. long fun(char *p)
{long s=0,t;
    int i=0,j,in=strlen(p),k,s1;
    if(p[0]=='-')
       i++;
    for(j=i;j<=n-1;j++)
    {t=p[j]-'0';
       s1=10;
       for (k=j;k<n-1;k++)
         t*=s1;
       s+=t; }
    if(p[0]=='-')
       return -s;
    else
       return s;}
25. char *fun(char *s,char *t)
{char *p,*t1=t,*s1=s;
    int n=0,m=0;
    while(*s1)
    {n++;
        s1++;}
    while(*t1)
    {m++;
        t1++;}
    if(n>=m)
       p=s;
    else
       p=t;
    return p;}
26. double fun(double eps)
{double s;
     float n,t,pi;
     t=1;pi=0;n=1.0;s=1.0;
     while((fabs(s))>=eps)
     {pi+=s;
        t=n/(2*n+1);
        s*=t;
        n++;}
     pi=pi*2;
     return pi;}
27.void fun(int m,int *a,int *n)
{int i,j;*n=0;
     for(i=1;i<=m;i++)
        if(i%7==0//i%11==0)
        {a[j]=i;
            j++;}
     *n=j;}
28. void fun(int a[],int n, int *max,int *d)
{int i;
    *max=a[0];
    *d=0;
    for(i=0;i<n;i++)
        if(a[i]>*max)
        {*max=a[i];
            *d=i;}}
29. void fun(char *ss)
{int i,n;
    n=strlen(ss);
    for(i=1;i<n;i+=2;)
        if(ss[i]>='a'&&ss[i]<='z')
           ss[i]=ss[i]-32;}
30. int fun(int a[][M])
{int i,j,max;
    max=a[0][0];
    for(i=0;i<2;i++)
        for(j=0;j<M;j++)
           if(a[i][j]>max)
              max=a[i][j];
    return max;}
31. void fun(char *s,char t[])
{int i,j,n;
     n=strlen(s);
     for(i=0;i<n;i++)
        if(i%2==0&s[i]%2==0)
        {t[j]=s[j];
             j++;}
     t[j]='\0';}
32. void fun(char *s,char t[])
{int i,j=0,n;
     n=strlen(s);
     for(i=0;i<n;i++)
        if(i%2!=0&s[i]%2!=0)
        {t[j]=s[j];
            j++;}
     t[j]='\0';}
33. void fun(char *a,int n)
{int i=0,k=0;
     char *p,*t;
     p=t=a;
     while(*t)
        t++;
     t--;
     while(*t--'*')
     {k++;
     t--;}
     t++;
     if(k>n)
     {while(*p&p<t+n)
     {a[i]=*p;
      i++;
       p++;}
     a[i]='\0'; }}
34. int fun(STREC*a,STREC *b)
{int i,j=0,max;
    max=a[0].s;
    for(i=0;i<N;i++)
       if(a[i].s==max)
       {*(b+j)=a[i];
            j++;
            n++;}
    return n;}
35. void fun(char *str)
{int i=0;
    char *p=str;
    while(*p)
    {if(*p!='')
          {str[i]=*p;
              i++;}
          p++;}
    str[i]='\0';}
36. void fun(char *a)
{int i=0,n=0;
    char *p;
    p=a;
    while (*p=='*')
    {n++;
        p++;}
    while (*p)
    {a[i]=*p;
        i++;
        p++;}
    while(n!=0)
    {a[i]='*';
        i++;
        i--;}
    a[i]='\0';}
37. void fun(STREC *p)
{double av=0.0;
    int i;
    for(i=0;i<N;i++)
       av+=p->s[i];
    av/=N;
    p->ave=av;}
38. int fun(char *ss,char c)
{int n=0;
    while(*ss)
    {if(*ss==c)
             n++;
         ss++;}
    return n;}
39. void fun(int *w,int p,int n)
{int b[N],i,j=0;
     for(i=0;i<=p;i++)
        b[i]=w[i];
     for(i=p+1;i<n;i++)
     {w[j]=w[i];
        j++;}
     for(i=0;i<=p;i++)
     {w[j]=b[i];
        j++;}}
40.void fun(char *w,int m)
{char b[N];
     int i,j=0;
     for(i=0;i<m;i++)
     {b[j]=w[i];
        j++;}
     for(i=0;i<strlen(w)-m;i++)
        w[i]=w[i+m];
     for(j=0;j<m;j++)
     {w[i]=b[j];
        i++;}
     w[i]='\0';}
41. void fun(char (*s)[N],char *b)
{int i,j,k=0;
    for(j=0;j<n;j++)
       for(i=0;i<M;i++)
       {b[k]=*(*(s+i)+j)
          k++;}
    b[k]='\0';}
42. void fun(int a[][N],int m)
{int i,j;
    for(j=0;j<N;j++)
       for(i=0;i<=j;i++)
           a[i][j]=a[i][j]*m;}
43. char *fun(char (*a)[81],int num)
{int i;
    char *max;
    max=a[0];
    for(i=0;i<num;i++)
       if(strlen(max)<strlen(a[i]))
           max=a[i];
    return max;}
44. int fun(char *str,char *substr)
{int n;
    char *p,*r;
    n=0;
       while(*str)
       {p=str;
          r=substr;
          while(*r)
              if(*r==*p)
              {r++;
                 p++;}
              else
                 break;
          if(*r=='\0')
              n++;
          str++;}
       return n;}
45.void fun(char *a,int n,int h,int e)
{int i=0;
    char *p;
    for(p=a+h;p<a+n-e;p++)
    {*(a+i)=*p;
       i++;}
    *(a+i)='\0';}
46. void fun(STREC a[])
{int i,j;
    STREC t;
    for(i=0;i<N-1;i++)
       for(j=i;s<N;j++)
          if(a[i].s<a[j].s)
          {t=a[i];
              a[i]=a[j];
              a[j]=t; }}
47. void fun(char *ss)
{int i,n=0;
    char *p=ss;
    while(*p)
    {n++;
       p++;}
    for (i=0;i<n;i++)
        if ((ss[i]='a'&ss[i]<='z')&i%2!=0)
             ss[i]=ss[i]-32;
    ss[i]='\0';}
48. void fun(int a,int b,long *c)
{*c=(a/10)*1000+(b/10)*100+(a%10)*10+b%10;}
49. void fun(char *s,char t[])
{int i,j=0,n=strlen(s);
    for(i=0;i<n;i++)
        if(i%2==0&s[i]%2!=0)
        else
        {f[j]=s[i];
           j++;}
    t[j]='\0';}
50. void fun(STU a[],STU *s)
{int i,max;
    max=a[0].s;
    for (i=0;i<N;i++)
        if(a[i].s>max)
        {max=a[i].s;
             *s=a[i];}}
51. void fun(int m,int *k,int xx[])
{int i,j;
     int t=0;
     for(i=2;i<m;i++)
     {j=2;
        while(j<i)
        {if(i%j==0)
            {xx[t]=i;
               t++;
               break;}
            j++;}
         *k=t;}}
52. void fun(char p1[],char p2[])
{int i=0,n=0;
    char *p=p1,*q=p2;
    while (*p)
    {p++;
        n++;}
    i=n;
    while(*p)
    {p1[i]=*q;
        q++;
        i++;}
    p1[i]='\0';}
53. void fun(int a[3][3],int b[3][3])
{int i,j,at[3][3];
     for(i=0;i<=2;i++)
        for(j=0;j<=2;j++)
           at[i][j]=a[j][i];
     for(i=0;i<3;i++)
        for(j=0;j<3;j++)
           b[i][j]=a[i][j]+at[i][j];}
54. double fun(STREC *a, STREC *b,int *n)
{double aver=0.0;
    int i,j=0;
    *n=0;
    for (i=0;i<N;i++)
        aver+=a[i].s;
    aver/=N;
    for(i=0;i<N;i++)
       if(a[i].s<aver)
       {b[j]=a[i];
           (*n)++;
           j++; }
       return aver;}
55. void fun(int(*s)[10],int *b,int *n,int mm,int nn)
{int i,j;
     for(i=0;i<mm;i++)
        for(j=0;j<nn;j++)
        {b[*n]=*(*(s+i)+j);
            *n=*n+1;}}
56. void fun(char*a,char *p)
{int i=0;
     char *p=a;
     while(q<=p)
     {if(*q!='*')
         {a[i]=*q;
             i++;}
         q++;}
     while(*q)
     {a[i]=*q;
         i++;
         q++;}
     a[i]='\0';}
57.int fun(STREC*a,STREC *b,int l,int h)
{int i,j=0;
    for(i=0;i<N;i++)
       if(a[i].s>=l&a[i].s<=h)
       {b[j]=a[i];
            j++;}
    return j;}
58. double fun(int n)
{double s=0.0;
    int i;
    for(i=1;i<n;i++)
        if(i%3==0&i%7==0)
           s=s+i;
        s=sqrt(s);
    return s;}
59. void fun(char a[M][N],char *b)
{int i,j,k=0;
     for(i=0;i<M;i++)
     {for(j=0;j<N;j++)
            if(*(*(a+i)+j))
            {b[k]=*(*(a+i)+j)
                k++;}
            else
                break;
         b[k]='\0';}}
60. int fun(int a[],int n)
{int i,t,j=0,*p=a;
    t=p[0];
    for(i=0;i<=n;i++)
       if(t==p[i])
         ;
       else
       {a[j]=t;
          t=p[i];
          j++;}
    if(i>=n)
       a[j]=t;
    return j;}
61.void fun(int *a,int *b)
{int i,j;
     for(j=0;i<M;j++)
        b[j]=0;
     for(i=0;i<N;i++)
        if(a[i]>=0&a[i]<=9)
           b[0]+=1;
        else if(a[i]>=10&a[i]<=19)
           b[1]+=1;
        else if(a[i]>=20&a[i]<=29)
           b[2]+=1;
        else if(a[i]>=30&a[i]<=39)
           b[3]+=1;
        else if(a[i]>=40&a[i]<=49)
           b[4]+=1;
        else if(a[i]>=50&a[i]<=59)
           b[5]+=1;
        else if(a[i]>=60&a[i]<=69)
           b[6]+=1;
        else if(a[i]>=70&a[i]<=79)
           b[7]+=1;
        else if(a[i]>=80&a[i]<=89)
           b[8]+=1;
        else if(a[i]>=90&a[i]<=99)
           b[9]+=1;
        else
           b[10]+=1;}
62. int fun (char *s)
{int i,n=0;
    for(i=0;i<strlen(s);i++)
    {if(s[i]='a'&s[i]<='z'&s[i+1]==''
‖s[i+1]=='\0')
          n++;}
    return n;}
63.int fun(int n)
{int s=0,i;
    for(i=2;i<=n-1;i++)
       if(n%i==0)
           s+=i;
    return s;}
64. void fun(char *s,char t[])
{int i,j=0,n;
     n=strlen(s);
     for(i=0;i<n;i++)
        if(s[i]%2==0)
        {t[j]=s[i];
           j++;}
     t[j]='\0';}
65. void fun(int a,int b,long *c)
{*c=(b%10)*1000+(a/10)*100+(b/10)*10+a%10;}
66. void fun(char *a)
{int i=0;char *p=a;
    while(*p)
    {if(*p!='*')
         {a[i]=*p;
            i++;}
         p++;}
    a[i]='\0';}
67. STREC fun(STREC*,char *b)
{int i;
      STREC h;
      for(i=0;i<N;i++)
         if(strcmp(a[i].num,b)==0)
         {h=a[i];
            break; }
         else
         {h.num=="";
            h.s=-1;}
       return h;}
68.sn=1+1/1!+1/2!+1/3!+1/4!+...+1/n!
double fun(int n)
{double t,sn=1.0;
    int i,j;
    for(i=1;i<n;i++)
    {t=1.0;
        for(j=1;j<=i;j++)
           t*j;
        sn+=1.0/t;}
    return sn;}
69. F(0)=0,F(1)=1,F(n)=F(n-1)+F(n-2)
int fun(int t)
{int a=1,b=1,c=0,i;
    for(i=4;i<=t;i++)
    {if(c<t)
       {c=a+b;
           a=b;
           b=c;}
       else
           break;}
     return c;}
70. double fun (int n)
{double s=0.0;
    int i;
    for(i=1;i<=n;i++)
       s=s+1.0/(i*(i+1));
    return s;}
71. void fun(int a,int b,long *c)
{*c=(a%10)*1000+(b/10)*100+(a/10)*10+b%10;}
72. void fun(char *s,char t[])
{int i,j=0,n=strlen(s);
    for(i=0;i<n;i++)
       if(i%2!=0)
       {t[j]=s[i];
          j++;}
    t[j]='\0';}
73. void fun(char *a,char *h,char *p)
{int i=0;
    char *q=a;
    while(q<h)
    {a[i]=*q;
        q++;
        i++;}
    while(q<p)
    {if(*q!=''*)
        {a[i]=*q;
           i++;}
        q++;}
    while(*q)
    {a[i]=*q;
        i++;
        q++;}
    a[i]='\0';}
74.int fun(STREC *a,STREC *b)
{int i,j=0,n=0,min;
    min=a[0].s;
    for(i=0;i<N;i++)
       if(a[i].s<min)
            min=a[i].s;
    for(i=0;i<N;i++)
       if(a[i].s==min)
       {*(b+j)=a[i];
          j++;
          n++;}
     return n;}
75. void fun(int (*s)[]10,int *b,int *n,int mm,int nn)
{int i,j;
     for(j=0;j<nn;j++)
        for(i=0;i<mm;i++)
        {b[*n]=*(*(s+i)+j);
           *n=*n+1;}}
76.double fun(double x)
{double s1=1.0,p=1.0,sum=0.0,s0,t=1.0;
      int n=1;
      do
      {s0=s1;
          sum+=s0;
          t*=n;
          p*=(0.5-n+1)*x;
          s1=p/t;
          n++;}while(fabs(s1-s0)>1e-6);
      return sum;}
77. void fun(int a,int b,long *c)
{*c=(b%10)*1000+(a%10)*100+(b/10)*10+a/10;}
78. void fun(char *s,char t[])
{int i,j=0,n=strlen(s);
    for(i=0;i<n;i++)
       if (s[i]%2!=0)
       {t[j]=s[i];
           j++;}
    t[j]='\0';}
79. void fun(STU a[],STU *s)
{int i,min;
     min=a[0].s;
     for(i=0;i<N;i++)
        if(a[i].s<min)
        {min=a[i].s;
           *s=a[i];}}
80. fun(int a[][N],int n)
{int i,j;
    for(i=0;i<N;i++)
       for(j=0;j<=i;j++)
          a[i][j]=a[i][j]*n;}
81. void fun(int a,int b,long *c)
{*c=(b/10)*1000+(a/10)*100+(b%10)*10+a%10;}
82. float fun(float *a,int n)
{float ave=0.0;
    int i;
    for(i=0;i<n;i++)
       ave+=a[i];
    ave/=n;
    return ave;}
83. void fun(char *a)
{int i=0;
    char *p,*q;
    p=q=a;
    while(*p)
       p++;
    p--;
    while(*p=='*')
       p--;
    while(q<=p)
    {a[i]=*q;
       i++;
       q++;}
    a[i]='\0';}
84. void fun(int a,int b,long *c)
{c=(b/10)*1000+(a%10)*100+(b%10)*10+a/10;}
85. double fun(STREC *h)
{double aver=0.0;
   while(h!=NULL)
   {aver+=h->s;
       hy=h->next;}
   aver/=N;
   return aver;}
86. double fun(double x[10])
{int i,j;
   double s=0.0,s1=0.0;
   for(i=0;i<10;i++)
      s1+=x[i];
   s1/=10;
   for(j=0;j<10;j++)
      s+=(x[j]-s1)*(x[j]-s1);
   s/=10;
   s=pow(s,0.5);
   return s;}
87. void fun(int a,int b,long *c)
{*c=(a/10)*1000+(a%10)*10+(b%10)*100+b/10;}
88. void fun(char *a)
{int i=0;
    char *p=a;
    while(*p&&*p=='*')
    {a[i]=*p;
        i++;
        p++;}
    while(*p)
    {if(*p!='*')
        {a[i]=*p;
            i++;}
        p++;}
    a[i]='\0';}
89. double fun(STREC *a,STREC *b,int *n)
{double aver=0.0;
   int i,j=0;
   for(i=0;i<N;i++)
      aver+=a[i].s;
   aver/=N;
   for(i=0;i<N;i++)
      if(a[i].s)>=aver}
        {*(b+j)=a[i];
          j++;}
       *n=j;
   return aver;}
90. Sn=(1-1/2)+(1/3-1/4)+...+(1/(2n-1)1/2n).
double fun(int n)
{int i;
     double sn=0.0;
     for(i=1;i<=n;i++)
        sn+=(1.0/(2*i-1)-1.0/(2*i));
     return sn;}
91. void fun(int a,int b,long *c)
{*c=(a%10)*1000+(b%10)*100+(a/10)*10+b/10;}
92.double fun(int m)
{int i;
    double s=0.0,log(double x);
    for(i=1;i<m;i++)
        s=s+log(i);
    s=sqrt(s);
    return s;}
93. double fun(double x,int n)
{double s=1.0,p=1.0;
    int i,j,t;
    for(i=1;j<=i;j++)
    {t=1;
       for(j=1;j<=n;i++)
           t=t*j;
       p=p*x;
       s=s+p/t;}
    return s;}
94. void fun(char *a)
{int i=0;
    char *p=a;
    while(*p&*p=='*')
         p++;
    while(*p)
    {a[i]=*p;
        i++;
        p++;}
    a[i]='\0';}
95. void fun(char *a,int n)
{int i=0,k=0;
     char *t=a;
     while(*t=='*')
     {k++;
     t++;}
     t=a;
     if(k>n)
     t=a+k-n;
     while(*t)
     {a[i]=*t;
        i++;
        t++;}
     a[i]='\0';}
96. double fun(double x[9])
{double sun=0.0;
    int i,j=1;
    for(i=0;i<9;i++)
       if(j<=8)
       {sun+=sqrt((x[i]+x[i+1])/2.0);
          j++;}
    return sum;}
97.double fun(int n)
{int i,j;
    double sum=0.0,t;
    for(i=1;i<=n;i++)
    {t=0.0;
        for(j=1;j<=i;j++)
           t+=j;
        sum+=1.0/t;}
    return sum;}
98. double fun(int n)
{int i;
    double sum=0.0;
    for(i=1;i<=n;i++)
       if(i%5==0‖i%9==0)
         sun+=1.0/i;
    return sum;}
99. double fun(int n)
{int m,k,i;
   double s=0.0;
   for(m=3;m<=n;m++)
   {k=sqrt(m);
      for(i=2;i<=k;i++)
        if (m%i==0) break;
      if(i>=k+1)
          s+=sqrt(m);}
   return s;}
100. double fun(int n)
{int i;
    double s=1.0,p=1.0;
    for(i=2;i<=n;i++)
    {p+=pow(i,0.5);
        s+=p;}
    return s;}
